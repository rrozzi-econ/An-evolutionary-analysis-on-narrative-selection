globals[
 omega
 p
 lambda
 avg_mu1
 avgmu_list
 std_mu1
 rho_1
 rho_2
 mu_0
 ps
 diff_ps1
 diff_ps_aut
 diff_ps_bay
 diff_ps_conf
 diff_ps_antic
; diff_ps_mid
; diff_ps_mid_a
 diff_ps_anti_auto
 nconf
 nanticonf
 nbays
 nauto
; nmid
; nmid_a
 nanti_auto
 tau
]

breed [bayesians bayesian]
breed [autorefs autoref]
breed [confs conf]
breed [anticonfs anticonf]
;breed [middles middle]
;breed [antimiddles antimiddle]
breed [antiautos antiauto]

turtles-own[
 mu
 mu_t
 s ;0=a 1=b
 avg_mu
 fit
 rho
 diff_ps
]

to setup
  clear-all
  set p 0.9 ;+ random-float 0.5
  set lambda 5; random-float 5 ; lambda 5 should be big enough to make only the beliefs count
  set rho_1 0.6 ;+ random-float 0.5 ;same here (random)
  set rho_2 0.9 ;rho_1 + random-float (1 - rho_1)
  set ps 0.5
  set mu_0 0.5
  set tau 10
  ifelse random-float 1 <= ps
    [set omega 0]
    [set omega 1]
  set nconf random pop
  ifelse nconf < pop [set nanticonf random (pop - nconf)] [set nanticonf 0]
  ifelse nconf + nanticonf < pop [set nbays random (pop - nconf - nanticonf)] [set nbays 0]
  ifelse nconf + nanticonf + nbays < pop [set nauto random (pop - nconf - nanticonf - nbays)] [set nauto 0]
  ifelse nconf + nanticonf + nbays + nauto < pop [set nanti_auto pop - (nconf + nanticonf + nbays + nauto)] [set nanti_auto 0]
  create-confs nconf [
    move-to one-of patches ;meaningless
    set mu list mu_0 mu
  ]
  create-anticonfs nanticonf [
    move-to one-of patches ;meaningless
    set mu list mu_0 mu
  ]
  create-bayesians nbays [
    move-to one-of patches ;meaningless
    set mu list mu_0 mu
  ]
  create-autorefs nauto [
    move-to one-of patches ;meaningless
    set mu list mu_0 mu
  ]
  create-antiautos nanti_auto [
    move-to one-of patches
    set mu list mu_0 mu
  ]
  set avgmu_list list mu_0 avgmu_list
  reset-ticks
end

to go

  ifelse random-float 1 <= ps; 2 instead of mu_0 for having certain A, and -1 instead of mu_0 for having certain B
    [set omega 0]
    [set omega 1]

  ifelse ticks = 0
    [set avg_mu1 mean [mu_0] of turtles
     set diff_ps1 mu_0 - ps
  ]
  [set avg_mu1 mean [first mu] of turtles
   set diff_ps1 mean [diff_ps] of turtles
   set avgmu_list fput avg_mu1 avgmu_list
  ]

  ifelse ticks = 0
    [set std_mu1 standard-deviation [mu_0] of turtles]
    [set std_mu1 standard-deviation [first mu] of turtles]

  ask confs [
    ifelse omega = 0
      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 0]
        [set s 1]
       ]

      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 1]
        [set s 0]
       ]

    det-mu1

    ifelse ticks = 0
    [set mu fput mu_0 mu]
    [set mu fput mu_t mu]

    ifelse first mu < 0.5 [set color blue] [set color red]
    set diff_ps (first mu - ps) ^ 2
  ]

  ask anticonfs [
   ifelse omega = 0
      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 0]
        [set s 1]
       ]

      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 1]
        [set s 0]
       ]

    det-mu2

    ifelse ticks = 0
    [set mu fput mu_0 mu]
    [set mu fput mu_t mu]

    ifelse first mu < 0.5 [set color blue] [set color red]
    set diff_ps (first mu - ps) ^ 2
  ]

  ask bayesians [
    ifelse omega = 0
      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 0]
        [set s 1]
       ]

      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 1]
        [set s 0]
       ]

    BU

    ifelse ticks = 0
    [set mu fput mu_0 mu]
    [set mu fput mu_t mu]

    ifelse first mu < 0.5 [set color blue] [set color red]
    set diff_ps (first mu - ps) ^ 2
  ]

  ask autorefs [
    ifelse omega = 0
      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 0]
        [set s 1]
       ]

      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 1]
        [set s 0]
       ]

    det-fit

    ifelse ticks = 0
    [set mu fput mu_0 mu]
    [set mu fput mu_t mu]

    ifelse first mu < 0.5 [set color blue] [set color red]
    set diff_ps (first mu - ps) ^ 2
    ]

  ask antiautos [ifelse omega = 0
      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 0]
        [set s 1]
       ]

      [ifelse random-float 1 <= p ; random-float 1 returns a number between 0 and 1, if it is lower than p then agents receive signal a (so it's more likely they receive signal a since omega = A)
        [set s 1]
        [set s 0]
       ]

    det-anti_fit

    ifelse ticks = 0
    [set mu fput mu_0 mu]
    [set mu fput mu_t mu]

    ifelse first mu < 0.5 [set color blue] [set color red]
    set diff_ps (first mu - ps) ^ 2
  ]

  if ticks > 0 [
    if ticks mod tau = 0 [
      ask turtles [if diff_ps1 - diff_ps < 0 [die]]
      let n count turtles with [diff_ps1 - diff_ps > 0]
      let nb_c count confs with [diff_ps1 - diff_ps > 0]
      let nb_ar count autorefs with [diff_ps1 - diff_ps > 0]
      let nb_aa count antiautos with [diff_ps1 - diff_ps > 0]
      let nb_b count bayesians with [diff_ps1 - diff_ps > 0]
      let nb_ac count anticonfs with [diff_ps1 - diff_ps > 0]
      ifelse random-float 1 < 0
     [create-confs ((nb_c / n) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-autorefs ((nb_ar / n) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-antiautos ((nb_aa / n) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-bayesians ((nb_b / n) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-anticonfs ((nb_ac / n) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
     ]
     [create-confs ((1 / 5) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-autorefs ((1 / 5) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-antiautos ((1 / 5) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-bayesians ((1 / 5) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
      create-anticonfs ((1 / 5) * (pop - n)) [move-to one-of patches set mu_0 0.5 set mu list mu_0 mu]
     ]
    ]
  ]

  tick
end

to BU ; standard bayesian updating
  ifelse s = 0; s = a
   [set mu_t (p * (first mu)) / (p * (first mu) + (1 - p) * (1 - (first mu)))]
   [set mu_t ((1 - p) * (first mu))/((1 - p) * (first mu) + p * (1 - (first mu)))]
end

to det-mu1 ; BU with conf

  ifelse s = 0; s = a
  [ifelse ((rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2 < ( (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2
    [set rho rho_1
     set fit (first mu) * rho_1 + (1 - first mu) * (1 - rho_1)
     set mu_t (rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu)))]
    [set rho rho_2
     set fit (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
     set mu_t (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu)))]
  ]
  [ifelse (((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2 < (((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2
    [set rho rho_1
     set fit (first mu) * (1 - rho_1) + (1 - first mu) * rho_1
     set mu_t ((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu)))]
    [set rho rho_2
     set fit (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
     set mu_t ((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu)))]
  ]
end

to det-mu2 ; BU with anticonf

  ifelse s = 0; s = a
  [ifelse ((rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2 > ( (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2
    [set rho rho_1
     set fit (first mu) * rho_1 + (1 - first mu) * (1 - rho_1)
     set mu_t (rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu)))]
    [set rho rho_2
     set fit (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
     set mu_t (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu)))]
  ]
  [ifelse (((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2 > (((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu))) - (mean [first mu] of other turtles)) ^ 2
    [set rho rho_1
     set fit (first mu) * (1 - rho_1) + (1 - first mu) * rho_1
     set mu_t ((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu)))]
    [set rho rho_2
     set fit (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
     set mu_t ((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu)))]
  ]
end

to det-fit ; fit

  ifelse s = 0; s = a
    [ifelse (first mu) * rho_1 + (1 - first mu) * (1 - rho_1) > (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
      [set mu_t (rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu)))
       set rho rho_1
       set fit (first mu) * rho_1 + (1 - first mu) * (1 - rho_1)
       ]
      [set mu_t (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu)))
       set rho rho_2
       set fit (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
       ]
    ]
    [ifelse (first mu) * (1 - rho_1) + (1 - first mu) * rho_1 > (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
      [set mu_t ((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu)))
       set rho rho_1
       set fit (first mu) * (1 - rho_1) + (1 - first mu) * rho_1
       ]
      [set mu_t ((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu)))
       set rho rho_2
       set fit (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
       ]
    ]

end

to det-anti_fit ; fit

  ifelse s = 0; s = a
    [ifelse (first mu) * rho_1 + (1 - first mu) * (1 - rho_1) < (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
      [set mu_t (rho_1 * (first mu)) / (rho_1 * (first mu) + (1 - rho_1) * (1 - (first mu)))
       set rho rho_1
       set fit (first mu) * rho_1 + (1 - first mu) * (1 - rho_1)
       ]
      [set mu_t (rho_2 * (first mu)) / (rho_2 * (first mu) + (1 - rho_2) * (1 - (first mu)))
       set rho rho_2
       set fit (first mu) * rho_2 + (1 - first mu) * (1 - rho_2)
       ]
    ]
    [ifelse (first mu) * (1 - rho_1) + (1 - first mu) * rho_1 < (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
      [set mu_t ((1 - rho_1) * (first mu))/((1 - rho_1) * (first mu) + rho_1 * (1 - (first mu)))
       set rho rho_1
       set fit (first mu) * (1 - rho_1) + (1 - first mu) * rho_1
       ]
      [set mu_t ((1 - rho_2) * (first mu))/((1 - rho_2) * (first mu) + rho_2 * (1 - (first mu)))
       set rho rho_2
       set fit (first mu) * (1 - rho_2) + (1 - first mu) * rho_2
       ]
    ]

end
